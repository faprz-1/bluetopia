"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var perfect_scrollbar_1 = require("perfect-scrollbar");
var resize_observer_polyfill_1 = require("resize-observer-polyfill");
var core_1 = require("@angular/core");
var core_2 = require("@angular/core");
var core_3 = require("@angular/core");
var perfect_scrollbar_interfaces_1 = require("./perfect-scrollbar.interfaces");
var perfect_scrollbar_interfaces_2 = require("./perfect-scrollbar.interfaces");
var PerfectScrollbarDirective = /** @class */ (function () {
    function PerfectScrollbarDirective(defaults, zone, elementRef, differs) {
        this.defaults = defaults;
        this.zone = zone;
        this.elementRef = elementRef;
        this.differs = differs;
        this.fxShow = true;
        this.fxHide = false;
        this.hidden = false;
        this.disabled = false;
        this.usePSClass = true;
        this.psPosStyle = 'relative';
        this.runInsideAngular = false;
        this.PS_SCROLL_Y = new core_3.EventEmitter();
        this.PS_SCROLL_X = new core_3.EventEmitter();
        this.PS_SCROLL_UP = new core_3.EventEmitter();
        this.PS_SCROLL_DOWN = new core_3.EventEmitter();
        this.PS_SCROLL_LEFT = new core_3.EventEmitter();
        this.PS_SCROLL_RIGHT = new core_3.EventEmitter();
        this.PS_Y_REACH_END = new core_3.EventEmitter();
        this.PS_Y_REACH_START = new core_3.EventEmitter();
        this.PS_X_REACH_END = new core_3.EventEmitter();
        this.PS_X_REACH_START = new core_3.EventEmitter();
    }
    Object.defineProperty(PerfectScrollbarDirective.prototype, "oldConfig", {
        set: function (config) {
            console.warn('Deprecated use of perfect-scrollbar selector, use perfectScrollbar instead!');
            this.config = config;
        },
        enumerable: true,
        configurable: true
    });
    PerfectScrollbarDirective.prototype.emit = function (event) { this[event.type.replace(/-/g, '_').toUpperCase()].emit(event); };
    PerfectScrollbarDirective.prototype.psScrollY = function (event) { this.emit(event); };
    PerfectScrollbarDirective.prototype.psScrollX = function (event) { this.emit(event); };
    PerfectScrollbarDirective.prototype.psScrollUp = function (event) { this.emit(event); };
    PerfectScrollbarDirective.prototype.psScrollDown = function (event) { this.emit(event); };
    PerfectScrollbarDirective.prototype.psScrollLeft = function (event) { this.emit(event); };
    PerfectScrollbarDirective.prototype.psScrollRight = function (event) { this.emit(event); };
    PerfectScrollbarDirective.prototype.psReachEndY = function (event) { this.emit(event); };
    PerfectScrollbarDirective.prototype.psReachStartY = function (event) { this.emit(event); };
    PerfectScrollbarDirective.prototype.psReachEndX = function (event) { this.emit(event); };
    PerfectScrollbarDirective.prototype.psReachStartX = function (event) { this.emit(event); };
    PerfectScrollbarDirective.prototype.ngOnDestroy = function () {
        var _this = this;
        if (this.ro) {
            this.ro.disconnect();
        }
        if (this.timeout) {
            window.clearTimeout(this.timeout);
        }
        if (this.ps) {
            if (this.runInsideAngular) {
                this.ps.destroy();
            }
            else {
                this.zone.runOutsideAngular(function () {
                    _this.ps.destroy();
                });
            }
        }
        this.ps = null;
    };
    PerfectScrollbarDirective.prototype.ngDoCheck = function () {
        if (!this.disabled && this.configDiff) {
            var changes = this.configDiff.diff(this.config || {});
            if (changes) {
                this.ngOnDestroy();
                this.ngAfterViewInit();
            }
        }
    };
    PerfectScrollbarDirective.prototype.ngOnChanges = function (changes) {
        if (changes['fxHide']) {
            changes['hidden'] = changes['fxHide'];
        }
        else if (changes['fxShow']) {
            changes['hidden'] = changes['fxShow'];
            changes['hidden'].currentValue = !changes['fxShow'].currentValue;
            changes['hidden'].previousValue = !changes['fxShow'].previousValue;
        }
        if (changes['disabled'] && !changes['disabled'].isFirstChange()) {
            if (changes['disabled'].currentValue !== changes['disabled'].previousValue) {
                if (changes['disabled'].currentValue === true) {
                    this.ngOnDestroy();
                }
                else if (changes['disabled'].currentValue === false) {
                    this.ngAfterViewInit();
                }
            }
        }
        else if (changes['hidden'] && !changes['hidden'].isFirstChange()) {
            if (changes['hidden'].currentValue !== changes['hidden'].previousValue) {
                if (changes['hidden'].currentValue === false) {
                    this.update();
                }
            }
        }
    };
    PerfectScrollbarDirective.prototype.ngAfterViewInit = function () {
        var _this = this;
        if (!this.disabled) {
            var config_1 = new perfect_scrollbar_interfaces_2.PerfectScrollbarConfig(this.defaults);
            config_1.assign(this.config);
            if (this.runInsideAngular) {
                this.ps = new perfect_scrollbar_1.default(this.elementRef.nativeElement, config_1);
            }
            else {
                this.zone.runOutsideAngular(function () {
                    _this.ps = new perfect_scrollbar_1.default(_this.elementRef.nativeElement, config_1);
                });
            }
            if (!this.configDiff) {
                this.configDiff = this.differs.find(this.config || {}).create(null);
            }
            this.zone.runOutsideAngular(function () {
                _this.ro = new resize_observer_polyfill_1.default(function (entries, observer) {
                    _this.update();
                });
                _this.ro.observe(_this.elementRef.nativeElement);
            });
        }
    };
    PerfectScrollbarDirective.prototype.update = function () {
        var _this = this;
        if (this.timeout) {
            window.clearTimeout(this.timeout);
        }
        this.timeout = window.setTimeout(function () {
            if (!_this.disabled && _this.configDiff) {
                try {
                    if (_this.runInsideAngular) {
                        _this.ps.update();
                    }
                    else {
                        _this.zone.runOutsideAngular(function () {
                            _this.ps.update();
                        });
                    }
                }
                catch (error) {
                    // Update can be finished after destroy so catch errors
                }
            }
        }, 0);
    };
    PerfectScrollbarDirective.prototype.geometry = function (prefix) {
        if (prefix === void 0) { prefix = 'scroll'; }
        return new perfect_scrollbar_interfaces_1.Geometry(this.elementRef.nativeElement[prefix + 'Left'], this.elementRef.nativeElement[prefix + 'Top'], this.elementRef.nativeElement[prefix + 'Width'], this.elementRef.nativeElement[prefix + 'Height']);
    };
    PerfectScrollbarDirective.prototype.position = function (absolute) {
        if (absolute === void 0) { absolute = false; }
        if (!absolute) {
            return new perfect_scrollbar_interfaces_1.Position(this.ps.reach.x, this.ps.reach.y);
        }
        else {
            return new perfect_scrollbar_interfaces_1.Position(this.elementRef.nativeElement.scrollLeft, this.elementRef.nativeElement.scrollTop);
        }
    };
    PerfectScrollbarDirective.prototype.scrollable = function (direction) {
        if (direction === void 0) { direction = 'any'; }
        var element = this.elementRef.nativeElement;
        if (direction === 'any') {
            return element.classList.contains('ps--active-x') ||
                element.classList.contains('ps--active-y');
        }
        else if (direction === 'both') {
            return element.classList.contains('ps--active-x') &&
                element.classList.contains('ps--active-y');
        }
        else {
            return element.classList.contains('ps--active-' + direction);
        }
    };
    PerfectScrollbarDirective.prototype.scrollTo = function (x, y, speed) {
        if (!this.disabled) {
            if (y == null && speed == null) {
                console.warn('Deprecated use of scrollTo, use the scrollToY function instead!');
                this.animateScrolling('scrollTop', x, speed);
            }
            else {
                if (x != null) {
                    this.animateScrolling('scrollLeft', x, speed);
                }
                if (y != null) {
                    this.animateScrolling('scrollTop', y, speed);
                }
            }
        }
    };
    PerfectScrollbarDirective.prototype.scrollToX = function (x, speed) {
        this.animateScrolling('scrollLeft', x, speed);
    };
    PerfectScrollbarDirective.prototype.scrollToY = function (y, speed) {
        this.animateScrolling('scrollTop', y, speed);
    };
    PerfectScrollbarDirective.prototype.scrollToTop = function (offset, speed) {
        this.animateScrolling('scrollTop', (offset || 0), speed);
    };
    PerfectScrollbarDirective.prototype.scrollToLeft = function (offset, speed) {
        this.animateScrolling('scrollLeft', (offset || 0), speed);
    };
    PerfectScrollbarDirective.prototype.scrollToRight = function (offset, speed) {
        var left = this.elementRef.nativeElement.scrollWidth -
            this.elementRef.nativeElement.clientWidth;
        this.animateScrolling('scrollLeft', left - (offset || 0), speed);
    };
    PerfectScrollbarDirective.prototype.scrollToBottom = function (offset, speed) {
        var top = this.elementRef.nativeElement.scrollHeight -
            this.elementRef.nativeElement.clientHeight;
        this.animateScrolling('scrollTop', top - (offset || 0), speed);
    };
    PerfectScrollbarDirective.prototype.animateScrolling = function (target, value, speed) {
        var _this = this;
        if (!speed) {
            var oldValue = this.elementRef.nativeElement[target];
            this.elementRef.nativeElement[target] = value;
            if (value !== oldValue) {
                this.ps.update();
            }
        }
        else if (value !== this.elementRef.nativeElement[target]) {
            var newValue_1 = 0;
            var scrollCount_1 = 0;
            var oldTimestamp_1 = performance.now();
            var oldValue_1 = this.elementRef.nativeElement[target];
            var cosParameter_1 = (oldValue_1 - value) / 2;
            var step_1 = function (newTimestamp) {
                scrollCount_1 += Math.PI / (speed / (newTimestamp - oldTimestamp_1));
                newValue_1 = Math.round(value + cosParameter_1 + cosParameter_1 * Math.cos(scrollCount_1));
                // Only continue animation if scroll position has not changed
                if (_this.elementRef.nativeElement[target] === oldValue_1) {
                    if (scrollCount_1 >= Math.PI) {
                        _this.animateScrolling(target, value, 0);
                    }
                    else {
                        _this.elementRef.nativeElement[target] = newValue_1;
                        // On a zoomed out page the resulting offset may differ
                        oldValue_1 = _this.elementRef.nativeElement[target];
                        _this.ps.update();
                        oldTimestamp_1 = newTimestamp;
                        window.requestAnimationFrame(step_1);
                    }
                }
            };
            window.requestAnimationFrame(step_1);
        }
    };
    PerfectScrollbarDirective.decorators = [
        { type: core_2.Directive, args: [{
                    selector: '[perfect-scrollbar], [perfectScrollbar]',
                    exportAs: 'ngxPerfectScrollbar'
                },] },
    ];
    /** @nocollapse */
    PerfectScrollbarDirective.ctorParameters = function () { return [
        { type: perfect_scrollbar_interfaces_2.PerfectScrollbarConfig, decorators: [{ type: core_2.Optional },] },
        { type: core_2.NgZone, },
        { type: core_2.ElementRef, },
        { type: core_1.KeyValueDiffers, },
    ]; };
    PerfectScrollbarDirective.propDecorators = {
        'fxShow': [{ type: core_3.Input },],
        'fxHide': [{ type: core_3.Input },],
        'hidden': [{ type: core_3.Input },],
        'disabled': [{ type: core_3.Input },],
        'usePSClass': [{ type: core_3.HostBinding, args: ['class.ps',] }, { type: core_3.Input },],
        'psPosStyle': [{ type: core_3.HostBinding, args: ['style.position',] }, { type: core_3.Input },],
        'runInsideAngular': [{ type: core_3.Input },],
        'config': [{ type: core_3.Input, args: ['perfectScrollbar',] },],
        'oldConfig': [{ type: core_3.Input, args: ['perfect-scrollbar',] },],
        'PS_SCROLL_Y': [{ type: core_3.Output, args: ['psScrollY',] },],
        'PS_SCROLL_X': [{ type: core_3.Output, args: ['psScrollX',] },],
        'PS_SCROLL_UP': [{ type: core_3.Output, args: ['psScrollUp',] },],
        'PS_SCROLL_DOWN': [{ type: core_3.Output, args: ['psScrollDown',] },],
        'PS_SCROLL_LEFT': [{ type: core_3.Output, args: ['psScrollLeft',] },],
        'PS_SCROLL_RIGHT': [{ type: core_3.Output, args: ['psScrollRight',] },],
        'PS_Y_REACH_END': [{ type: core_3.Output, args: ['psYReachEnd',] },],
        'PS_Y_REACH_START': [{ type: core_3.Output, args: ['psYReachStart',] },],
        'PS_X_REACH_END': [{ type: core_3.Output, args: ['psXReachEnd',] },],
        'PS_X_REACH_START': [{ type: core_3.Output, args: ['psXReachStart',] },],
        'psScrollY': [{ type: core_3.HostListener, args: ['ps-scroll-y', ['$event'],] },],
        'psScrollX': [{ type: core_3.HostListener, args: ['ps-scroll-x', ['$event'],] },],
        'psScrollUp': [{ type: core_3.HostListener, args: ['ps-scroll-up', ['$event'],] },],
        'psScrollDown': [{ type: core_3.HostListener, args: ['ps-scroll-down', ['$event'],] },],
        'psScrollLeft': [{ type: core_3.HostListener, args: ['ps-scroll-left', ['$event'],] },],
        'psScrollRight': [{ type: core_3.HostListener, args: ['ps-scroll-right', ['$event'],] },],
        'psReachEndY': [{ type: core_3.HostListener, args: ['ps-y-reach-end', ['$event'],] },],
        'psReachStartY': [{ type: core_3.HostListener, args: ['ps-y-reach-start', ['$event'],] },],
        'psReachEndX': [{ type: core_3.HostListener, args: ['ps-x-reach-end', ['$event'],] },],
        'psReachStartX': [{ type: core_3.HostListener, args: ['ps-x-reach-start', ['$event'],] },],
    };
    return PerfectScrollbarDirective;
}());
exports.PerfectScrollbarDirective = PerfectScrollbarDirective;
//# sourceMappingURL=perfect-scrollbar.directive.js.map