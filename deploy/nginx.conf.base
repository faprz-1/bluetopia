# Number of workers to run, usually equals number of CPU cores.
worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
  # Maximum number of simultaneous connections that can be opened by a worker process.
  worker_connections 1024;
}
http {
	# Basic Settings
	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
	keepalive_timeout 65;
	types_hash_max_size 2048;
	# Disable nginx version from being displayed on errors.
	server_tokens off;

	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	# SSL Settings
	ssl_session_cache   shared:SSL:1m;
	ssl_session_timeout 10m;
	ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers "ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS";
	ssl_stapling on;
	ssl_stapling_verify on;
	resolver 8.8.8.8;
	resolver_timeout 5s;

	# Enable HTTP Strict Transport Security
	add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";


	# Logging Settings
	access_log /var/log/nginx/access.log;
	error_log /var/log/nginx/error.log;

	# X-XSS protection
	add_header X-XSS-Protection "1; mode=block";

	# Disable maximun client request body size.
    client_max_body_size 0;

	# Enable gzip for everything but IE6.
    gzip on;
    gzip_disable "msie6";

	#Act as Load Balancer for 4 nodes
    upstream loopback.local {
        server 127.0.0.1:3000;
        #server loopback-server_2:3000;
        #server loopback-server_3:3000;
        #server loopback-server_4:3000;
    }


	server {
		listen 80 ;
		listen [::]:80 ;
		# Redirect traffic to https
		location / {
			return 301 https://$host$request_uri;
		}
	}

	server {
		root /home/ubuntu/REPO/persistence/compiled_angular;
		index index.html;
		server_name loopback.local;
		ssl on;

		location / {
			# First attempt to serve request as file, then
			# as directory, then fall back to displaying a 404.
			try_files $uri $uri/ =404;
		}

		# Location configuration to use the loopback upstream
		location /api {
			proxy_pass          http://loopback.local;
			proxy_read_timeout  120;
			proxy_set_header        Host $host;
			proxy_set_header        X-Real-IP $remote_addr;
			proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header        X-Forwarded-Proto $scheme;

			proxy_redirect      http://localhost http://loopback.local/api;
		}

		# Location configuration to use the loopback Socket
		location /socket.io {
			proxy_pass          http://loopback.local;
			proxy_http_version  1.1;
			proxy_read_timeout  120;
			proxy_set_header        Upgrade $http_upgrade;
			proxy_set_header        Connection "upgrade";
			proxy_set_header        Host $host;
			proxy_set_header        X-Real-IP $remote_addr;
			proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header        X-Forwarded-Proto $scheme;

			proxy_redirect      http://localhost http://loopback.local/socket.io;
		}

		listen [::]:443 ssl ipv6only=on;
		listen 443 ssl;
		ssl_certificate /etc/letsencrypt/live/project.com/fullchain.pem;
		ssl_certificate_key /etc/letsencrypt/live/project.com/privkey.pem;
		# include /etc/letsencrypt/options-ssl-nginx.conf;
		ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

	}
}

